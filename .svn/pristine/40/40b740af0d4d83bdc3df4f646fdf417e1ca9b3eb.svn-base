package com.fx.passform.common;
import java.io.IOException;
import com.fx.passform.util.SendUtil;
import com.fx.passform.util.ValCodeUtil;
import com.jfinal.core.Controller;
import javax.imageio.ImageIO;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.jfinal.kit.JsonKit;

/**
 * CommonController
 *
 * @param <HttpRequest>
 */
public class CommonController extends Controller {
    public static final String SESSION_VALIDATORCODE = "session_validatorCode";

    public void index() {
        render("/common/index.jsp");
    }
    
    public void page01() {
        render("/common/page01.jsp");
    }

    public void page02() {
        render("/common/page02.jsp");
    }

    public void page03() {
        render("/common/page03.jsp");
    }

    public void page04() {
        render("/common/page04.jsp");
    }

    public void checkValue(){         //查找用户账号在ldap上的状态
		String value = getPara("value");
		String[] val = SendUtil.getUserStatus( value);
		renderJson( JsonKit.toJson(val));
	}
	
	/*public void checkPass(){
		String name = getPara("name");
		String pass = getPara("pass");
		Boolean verify = SendUtil.verifyPass(name, pass);
		renderJson(JsonKit.toJson(verify));
	}*/
	
	public void checkCode() {    //图片验证码获取
		String code = getSessionAttr(SESSION_VALIDATORCODE);
		String  key = JsonKit.toJson(code);
		renderJson(key);

	}
    public void rendCode() {
        ValCodeUtil.ValidatorCode codeUtil = ValCodeUtil.getCode();
        setSessionAttr(SESSION_VALIDATORCODE, codeUtil.getCode());
        HttpServletRequest request = getRequest();
        HttpServletResponse response = getResponse();
        // 禁止图像缓存。
        response.setHeader("Pragma", "no-cache");
        response.setHeader("Cache-Control", "no-cache");
        response.setDateHeader("Expires", 0);
        response.setContentType("image/jpeg");

        ServletOutputStream sos = null;
        try {
            // 将图像输出到Servlet输出流中。
            sos = response.getOutputStream();
            ImageIO.write(codeUtil.getImage(), "png", sos);
            sos.flush();
            sos.close();
        } catch (Exception e) {
            //todo 渲染错误
        } finally {
            if (sos != null) {
                try {
                    sos.close();
                } catch (IOException e) {
                }
            }
        }
        return;
    }

    /**
     * java实现穿透代理获取客户端真实ip
     *
     * @return 真实的IP地址
     */
    private String getTrueIp() {
        HttpServletRequest request = getRequest();
        String strClientIp = request.getHeader("x-forwarded-for");
        if (strClientIp == null || strClientIp.length() == 0 || "unknown".equalsIgnoreCase(strClientIp)) {
            strClientIp = request.getRemoteAddr();
        } else {
            String[] ipList = strClientIp.split("[,]");
            String strIp ;
            for (int index = 0; index < ipList.length; index++) {
                strIp = ipList[0];
                if (!("unknown".equalsIgnoreCase(strIp))) {
                    strClientIp = strIp;
                    break;
                }
            }
        }
        return strClientIp;
    }
}
