package com.fx.passform.model;

import com.jfinal.plugin.activerecord.Model;

import java.util.Date;
import java.util.List;

/**
 * LockStatus's Model
 * <p/>
 * Created by fan.xu on 2014/10/21.
 */
public class LockStatus extends Model<LockStatus> {
    public static final LockStatus dao = new LockStatus();

    /**
     * 增加锁定记录
     *
     * @param ip
     * @param user
     * @return
     */
    public boolean addLockStatus(String ip, String user) {
        LockStatus lockStatus = new LockStatus();
        return lockStatus.set("IP", ip).set("userName", user).set("sendCount", 1).save();
    }

    /**
     * 根据审计策略，找到当前用户的审计结果
     *
     * @param ip
     * @param user
     * @return
     */
    public List<LockStatus> findLockReco(String ip, String user) {
        List<AuditLockTime> locks = AuditLockTime.dao.findAll();
        if (locks.size() > 0) {
            StringBuilder builder = new StringBuilder(256);
            builder.append("select * from data_audit ");
            AuditLockTime lockTime = locks.get(0);
            int type = lockTime.getInt("type");
            switch (type) {
                case 1:
                    builder.append(" where userName = ");
                    builder.append(user);
                    builder.append(" and ");
                    builder.append(" IP = ");
                    builder.append(ip);
                    break;
                case 2:
                    builder.append(" where ip = ");
                    builder.append(ip);
                    break;
                case 3:
                    builder.append(" where userName = ");
                    builder.append(user);
            }
            return find(builder.toString());
        }
        return null;
    }

    /**
     * 根据用户名，ip等更新用户锁定状态。
     * 如果失败次数大于
     *
     * @param ip
     * @param user
     * @return
     */
    public boolean updLockStatus(String ip, String user) {
        List<LockStatus> locks = findLockReco(ip, user);
        if (locks.size() > 0) {
            LockStatus lock = locks.get(0);
            int count = lock.getInt("sendCount");
            AuditLockTime locktime = AuditLockTime.dao.findAll().get(0);
            int sendCount = locktime.getInt("sendCount");
            lock.set("sendCount", count + 1).set("", new java.sql.Timestamp(new Date().getTime()));
            if (count + 1 >= sendCount) {
                lock.set("lockStatus", 1);
            }
            return lock.update();
        }
        return false;
    }

    /**
     * 返回说要审计数据
     * @return
     */
     public List<LockStatus> findAll(){
         return dao.find("select * from data_audit");
     }
}
