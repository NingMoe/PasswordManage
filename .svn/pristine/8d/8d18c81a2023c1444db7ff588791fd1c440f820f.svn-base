package com.fx.passform.util;

import com.fx.passform.plugin.*;
import com.novell.ldap.*;
import com.novell.ldap.util.Base64;
import org.apache.log4j.Logger;

import java.io.UnsupportedEncodingException;
import java.security.Security;
import java.util.*;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;

/**
 * 发送邮件和短信的工具类
 * <p/>
 * Created by fan.xu on 2014/10/20.
 */
public class SendUtil {

    private static Logger logger = Logger.getLogger("SendUtil");

    /**
     * 产生随机数据6位，用于SMS验证码。
     *
     * @return 随机码
     */
    public  static String genSMS() {
        int rInt;
        Random rand = new Random();
        do {
            rInt = rand.nextInt(1000000);
        } while (rInt < 100000);
        return Integer.toString(rInt);
    }

    /**
     * 发送短信
     *
     * @param valCode 验证
     * @param phone   电话
     * @return
     */
    public static boolean  sendSMS(String valCode,String phone) {
        SMSInfo info = SMSKit.getInfo();
        ExecutorService pool = SMSKit.getPool();
        //初始化SDK
        SMSSender sender = new SMSSender(info, phone, valCode);
        HashMap<String, Object> result = null;
        try {
            result = pool.submit(sender).get();
            if ("000000".equals(result.get("statusCode"))) {
                logger.info("Send SMS OK! valCode["+valCode+"] phone["+phone+"]");
                //正常返回输出data包体信息（map）
//                HashMap<String, Object> data = (HashMap<String, Object>) result.get("data");
//                Set<String> keySet = data.keySet();
//                for (String key : keySet) {
//                    Object object = data.get(key);
//                    System.out.println(key + " = " + object);
//                }
                return true;
            } else {
                logger.info("Send SMS Error! valCode["+valCode+"] phone["+phone+"] statusCode ["+result.get("statusCode")+"]" );
                return false;
                //todo LOG 常返回输出错误码和错误信息
               // System.out.println("错误码=" + result.get("statusCode") + " 错误信息= " + result.get("statusMsg"));
            }
        } catch (InterruptedException e) {
            //todo LOG
            e.printStackTrace();
        } catch (ExecutionException e) {
            //todo LOG
            e.printStackTrace();
        }
        return false;
    }

    /**
     * 发送邮件
     *
     * @param toAddr  接收邮件地址
     * @param title   邮件主题
     * @param content 邮件内容
     * @return
     */
    public static void sendEmail(String toAddr, String title, String content) {
        ExecutorService pool = MailKit.getPool();
        MailInfo info = MailKit.getInfo();
        MailSender sender = new MailSender(info, toAddr, title, content);
        pool.submit(sender);
    }

    /**
     * 查询属性值
     *
     * @param name
     * @param value
     * @param sechBase
     * @return
     */
    public static LDAPEntry findEntry(String name, String value, String sechBase) {
       // String searchFilter = name + "=" + value + "@freecomm-networks.com";
        String searchFilter = name + "=" + value ;
        int searchScope = LDAPConnection.SCOPE_SUB;
        LDAPConectionDataPool pool = LdapKit.getPool();
        LDAPConectionData data = null;
        try {
            data = pool.getLDAPConectionData();
            LDAPConnection connection = data.getConn();
            LDAPSearchResults searchResults = connection.search(pool.getBaseDn(), searchScope, searchFilter, null, false);
            while (searchResults.hasMore()) {
                return searchResults.next();
            }
        } catch (InterruptedException e) {
            //todo LOG
            e.printStackTrace();
        } catch (LDAPException e) {
            e.printStackTrace();
        } finally {
            if (data != null) pool.setConectionDataFree(data);
        }
        return null;
    }

    /**
     * 查询DN,主要是中文显示名
     * CN=oaadmin,OU=PHICOMM,DC=allwin-tech,DC=com
     *
     * @param name
     * @param sechBase
     * @return
     */
    public static LDAPEntry findEntry(String name, String sechBase) {
        String searchFilter = "name=" + name;
        int searchScope = LDAPConnection.SCOPE_SUB;
        LDAPConectionDataPool pool = LdapKit.getPool();
        LDAPConectionData data = null;
        try {
            data = pool.getLDAPConectionData();
            LDAPConnection connection = data.getConn();
            LDAPSearchResults searchResults = connection.search(pool.getBaseDn(), searchScope, searchFilter, null, false);
            while (searchResults.hasMore()) {
                return searchResults.next();
            }
        } catch (InterruptedException e) {
            //todo LOG
            e.printStackTrace();
        } catch (LDAPException e) {
            if (e.getResultCode() == LDAPException.NO_SUCH_OBJECT) {
            } else if (e.getResultCode() == LDAPException.INSUFFICIENT_ACCESS_RIGHTS) {
                //todo LOG
            } else {
                //todo LOG
            }
        } finally {
            if (data != null) pool.setConectionDataFree(data);
        }
        return null;
    }

    /**
     * 根据域账号和密码，进行验证
     *
     * @param name
     * @param pass
     * @return
     */
    public static boolean verifyPass(String name, String pass) {
        boolean correct = false;
       // LDAPEntry entry = findEntry("userPrincipalName", name, "");
        LDAPEntry entry = findEntry("SamAccountName", name, "");
        if (entry != null) {
            LDAPConectionDataPool pool = LdapKit.getPool();
            LDAPConectionData data = null;
            try {
                data = pool.getLDAPConectionData();
                LDAPConnection connection = data.getConn();
                LDAPAttribute attr = new LDAPAttribute("unicodePwd", pass);
                correct = connection.compare(entry.getDN(), attr);
            } catch (InterruptedException e) {
                //todo LOG
                e.printStackTrace();
            } catch (LDAPException e) {
                if (e.getResultCode() == LDAPException.NO_SUCH_OBJECT) {
                    //todo LOG
                } else if (e.getResultCode() == LDAPException.NO_SUCH_ATTRIBUTE) {
                    //todo LOG
                } else {
                    //todo LOG
                }
            } finally {
                if (data != null) pool.setConectionDataFree(data);
            }
        }
        return correct;
    }

//    /**
//     * 根据用户名，设置用户信息
//     *
//     * @param name
//     * @param values key/value 组成的数组
//     * @return
//     */
//    public static boolean modifyAttr(String name, String baseDn, String[]... values) {
//        String searchFilter = "objectClass=*";
//        String searchBase = "OU=freecomm,DC=freecomm-networks,DC=com";
//        int searchScope = LDAPConnection.SCOPE_BASE;
//        LDAPConectionDataPool pool = LdapKit.getPool();
//        LDAPConectionData data = null;
//        try {
//            data = pool.getLDAPConectionData();
//            LDAPConnection connection = data.getConn();
//            LDAPSearchResults searchResults = connection.search(baseDn, searchScope, searchFilter, null, false);
//            while (searchResults.hasMore()) {
//                LDAPEntry nextEntry;
//                try {
//                    nextEntry = searchResults.next();
//                } catch (LDAPException e) {
//                    if (e.getResultCode() == LDAPException.LDAP_TIMEOUT || e.getResultCode() == LDAPException.CONNECT_ERROR) {
//                        break;
//                    } else {
//                        continue;
//                    }
//                }
//
//                String dn = nextEntry.getDN();
//                String trueName = "CN=" + name;
//                if (dn.startsWith(trueName)) {
//                    List<LDAPModification> modList = new ArrayList<LDAPModification>();
//                    for (String[] val : values) {
//                        LDAPAttribute attribute = new LDAPAttribute(val[0], val[1]);
//                        modList.add(new LDAPModification(LDAPModification.REPLACE, attribute));
//                    }
//                    LDAPModification[] mods = new LDAPModification[modList.size()];
//                    mods = modList.toArray(mods);
//                    connection.modify(dn, mods);
//                    return true;
//                }
//            }
//        } catch (InterruptedException e) {
//            //todo LOG
//            e.printStackTrace();
//        } catch (LDAPException e) {
//            e.printStackTrace();
//        } finally {
//            if (data != null) pool.setConectionDataFree(data);
//        }
//        return false;
//    }

    /**
     * 修改密码
     *
     * @param name    用户名
     * @param oldPass 旧密码
     * @param newPass 新密码
     * @return
     */
    public static boolean modifPassword(String name, String oldPass, String newPass) {
        LDAPSocketFactory ssf;
        int ldapPort = LDAPConnection.DEFAULT_SSL_PORT;
        int ldapVersion = LDAPConnection.LDAP_V3;
       // LDAPEntry entry = findEntry("userPrincipalName", name, "");
        LDAPEntry entry = findEntry("SamAccountName", name, "");

        if (entry != null) {
            LDAPConectionDataPool pool = LdapKit.getPool();
            Security.addProvider(new com.sun.net.ssl.internal.ssl.Provider());
            System.setProperty("javax.net.ssl.trustStore", pool.getCerts());
            ssf = new LDAPJSSESecureSocketFactory();
            LDAPConnection.setSocketFactory(ssf);
            LDAPConnection lc = new LDAPConnection();

            try {
                lc.connect(pool.getUrl(), ldapPort);
                lc.bind(ldapVersion, pool.getUser(), pool.getPass().getBytes("UTF8"));

                LDAPModification[] modifications = new LDAPModification[1];
                String newQuotedPassword = "\"" +newPass + "\"";
                byte[] newUnicodePassword = newQuotedPassword.getBytes("UTF-16LE");
                LDAPAttribute addPassword = new LDAPAttribute("unicodePwd", newUnicodePassword);
                modifications[0] = new LDAPModification(LDAPModification.REPLACE, addPassword);

//                LDAPModification[] modifications = new LDAPModification[2];
//                LDAPAttribute deletePassword = new LDAPAttribute("userPassword", oldPass);
//                modifications[0] = new LDAPModification(LDAPModification.DELETE, deletePassword);
//                LDAPAttribute addPassword = new LDAPAttribute("userPassword", newPass);
//                modifications[1] = new LDAPModification(LDAPModification.ADD, addPassword);
                lc.modify(entry.getDN(), modifications);
                return true;
            } catch (LDAPException e) {
                //todo
                e.printStackTrace();
            } catch (UnsupportedEncodingException e) {
                //todo
                e.printStackTrace();
            } finally {
                try {
                    if (lc.isConnected()) {
                        lc.disconnect();
                    }
                } catch (Exception e) {
                }
            }
        }
        return false;
    }

    /**
     * 重置密码
     *
     * @param name    用户名
     * @param newPass 新密码
     * @return
     */
    public static boolean resetPass(String name, String newPass) {
        int ldapPort = LDAPConnection.DEFAULT_SSL_PORT;
        int ldapVersion = LDAPConnection.LDAP_V3;
        LDAPSocketFactory ssf;
       // LDAPEntry entry = findEntry("userPrincipalName", name, "");
        LDAPEntry entry = findEntry("SamAccountName", name, "");
        if (entry != null) {
            LDAPConectionDataPool pool = LdapKit.getPool();
            Security.addProvider(new com.sun.net.ssl.internal.ssl.Provider());
            System.setProperty("javax.net.ssl.trustStore", pool.getCerts());
            ssf = new LDAPJSSESecureSocketFactory();
            LDAPConnection.setSocketFactory(ssf);
            LDAPConnection lc = new LDAPConnection();
            try {
                lc.connect(pool.getUrl(), ldapPort);
                lc.bind(ldapVersion, pool.getUser(), pool.getPass().getBytes("UTF8"));
                LDAPModification[] modifications = new LDAPModification[1];
                String newQuotedPassword = "\"" +newPass + "\"";
                byte[] newUnicodePassword = newQuotedPassword.getBytes("UTF-16LE");
                LDAPAttribute addPassword = new LDAPAttribute("unicodePwd", newUnicodePassword);
                modifications[0] = new LDAPModification(LDAPModification.REPLACE, addPassword);
                lc.modify(entry.getDN(), modifications);
                return true;
            } catch (LDAPException e) {
                //todo
                e.printStackTrace();
            } catch (UnsupportedEncodingException e) {
                //todo
                e.printStackTrace();
            } finally {
                try {
                    if (lc.isConnected()) {
                        lc.disconnect();
                    }
                } catch (Exception e) {
                }
            }
        }
        return false;
    }

    /**
     * 返回用户的ldap状态
     *
     * @param user
     * @return
     */
 /*   public static String[] getUserStatus(String user) {
        LDAPEntry entry = findEntry("userPrincipalName", user, "");
        String[] values = new String[2];
        if (entry != null) {
            LDAPAttributeSet attributeSet = entry.getAttributeSet();
            Iterator<LDAPAttribute> allAttributes = attributeSet.iterator();
            while (allAttributes.hasNext()) {
                LDAPAttribute attribute = allAttributes.next();
                String attributeName = attribute.getName();
                if (attributeName.equals("mobile")) {
                    String mobile = getAttr(values, attribute);
                    if (!mobile.equals("")) {
                        values[1] = mobile;
                        continue;
                    }
                }

                //查找名称userAccountControl==name的属性
                if (attributeName.equals("userAccountControl")) {
                    String status = getAttr(values, attribute);
                    if (!status.equals("")) {
                        values[0] = status;
                    }
                }
            }
        }
        return values;
    }*/
    // 根据用户名找手机号码，密码
    public static String[] getUserStatus(String user) {
        //LDAPEntry entry = findEntry("userPrincipalName", user, "");
        LDAPEntry entry = findEntry("SamAccountName", user, "");
        String[] values = new String[2];
        if (entry != null) {
            LDAPAttributeSet attributeSet = entry.getAttributeSet();
            Iterator<LDAPAttribute> allAttributes = attributeSet.iterator();
            while (allAttributes.hasNext()) {
                LDAPAttribute attribute = allAttributes.next();
                String attributeName = attribute.getName();
                if (attributeName.equals("mobile")) {
                    String mobile = getAttr(values, attribute);
                    if (!mobile.equals("")) {
                        values[1] = mobile;
                        continue;
                    }
                }

                //查找名称userAccountControl==name的属性
                if (attributeName.equals("userAccountControl")) {
                    String status = getAttr(values, attribute);
                    if (!status.equals("")) {
                        values[0] = status;
                    }
                }
//                if (attributeName.equals("userPassword")) {
//                    String pass = getAttr(values, attribute);
//                    if (!pass.equals("")) {
//                        values[2] = pass;
//                        continue;
//                    }
//                }
            }
        }
        return values;
    }


    /**
     * 设置用户状态
     *
     * @param user   用户名
     * @param status 状态
     * @return
     */
    public static boolean setUserStatus(String user, String status) {
        //LDAPEntry entry = findEntry("userPrincipalName", user, "");
        LDAPEntry entry = findEntry("SamAccountName", user, "");
        if (entry != null) {
            LDAPConectionDataPool pool = LdapKit.getPool();
            LDAPConectionData data = null;
            try {
                data = pool.getLDAPConectionData();
                LDAPConnection connection = data.getConn();
                LDAPAttributeSet attributeSet = entry.getAttributeSet();
                for (LDAPAttribute attribute : (Iterable<LDAPAttribute>) attributeSet) {
                    String attributeName = attribute.getName();
                    //查找名称userAccountControl==name的属性
                    if (attributeName.equals("userAccountControl")) {
                        List<LDAPModification> modList = new ArrayList<LDAPModification>();
                        LDAPAttribute newAttribute = new LDAPAttribute("userAccountControl", status);
                        modList.add(new LDAPModification(LDAPModification.REPLACE, newAttribute));
                        LDAPModification[] mods = new LDAPModification[modList.size()];
                        mods = modList.toArray(mods);
                        connection.modify(entry.getDN(), mods);
                        return true;
                    }
                }

            } catch (InterruptedException e) {
                //todo LOG
                e.printStackTrace();
            } catch (LDAPException e) {
                if (e.getResultCode() == LDAPException.NO_SUCH_OBJECT) {
                    //todo LOG
                } else if (e.getResultCode() == LDAPException.NO_SUCH_ATTRIBUTE) {
                    //todo LOG
                } else {
                    //todo LOG
                }
            } finally {
                if (data != null) pool.setConectionDataFree(data);
            }
        }
        return false;
    }

    /**
     * 取得属性的值
     *
     * @param values
     * @param attribute
     * @return
     */
    private static String getAttr(String[] values, LDAPAttribute attribute) {
        Enumeration<String> allValues = attribute.getStringValues();
        if (null != allValues) {
            while (allValues.hasMoreElements()) {
                String val = allValues.nextElement();
                if (!Base64.isLDIFSafe(val)) {
                    val = Base64.encode(val.getBytes());
                }
                return val;
            }
        }
        return "";
    }

    /**
     * 校验用户名是否存在
     *
     * @param name
     * @return
     */
    public static boolean verifyName(String name) {
       // LDAPEntry entry = findEntry("userPrincipalName", name);
        LDAPEntry entry = findEntry("SamAccountName", name);
        return entry != null;
    }
}
